module Main exposing (Model, Msg(..), init, main, update, view)

import Browser
import Browser.Dom as BD
import Browser.Navigation as Nav
import Html exposing (Html, a, div, h1, h2, h3, img, p, text)
import Html.Attributes exposing (class, classList, href, src, style)
import Tachyons exposing (classes)
import Tachyons.Classes as T
import Url
import Url.Parser as Parser exposing ((</>), Parser, int, map, oneOf, parse, s, string, top)



-- ---- MODEL ----
-- type alias Model =
--     {}
-- init : ( Model, Cmd Msg )
-- init =
--     ( {}, Cmd.none )
---- MODEL ----


type alias Model =
    { key : Nav.Key
    , url : Url.Url
    , page : Page
    }


init : () -> Url.Url -> Nav.Key -> ( Model, Cmd Msg )
init flags url key =
    ( Model key url (Home homeData), Nav.pushUrl key (Url.toString url) )


type Page
    = NotFound PageData
    | Home PageData
    | Art PageData
    | Blog PageData
    | Portfolio PageData


type alias PageData =
    { title : String
    , subtitle : String
    , body : String
    }


notFoundData : PageData
notFoundData =
    { title = "Not Found"
    , subtitle = "Where is this?"
    , body = "Go somewhere else"
    }


artData : PageData
artData =
    { title = "Art"
    , subtitle = "Mostly pretty things"
    , body = "Other stuff goes here"
    }


homeData : PageData
homeData =
    { title = "Home"
    , subtitle = "My Website"
    , body = "Home page probably has a picture of something"
    }


blogData : PageData
blogData =
    { title = "Blog"
    , subtitle = "My thoughts about life"
    , body = "Why would anyone read this anyway?"
    }


portfolioData : PageData
portfolioData =
    { title = "Portfolio"
    , subtitle = "Examples of my webdev skills"
    , body = "Hacked together websites go here"
    }



---- UPDATE ----
-- type Msg
--     = NoOp
-- update : Msg -> Model -> ( Model, Cmd Msg )
-- update msg model =
--     ( model, Cmd.none )


type Msg
    = NoOp
    | LinkClicked Browser.UrlRequest
    | UrlChanged Url.Url


update : Msg -> Model -> ( Model, Cmd Msg )
update msg model =
    case msg of
        LinkClicked urlRequest ->
            case urlRequest of
                Browser.Internal url ->
                    ( model, Nav.pushUrl model.key (Url.toString url) )

                Browser.External href ->
                    ( model, Nav.load href )

        UrlChanged url ->
            handleUrl url model

        _ ->
            ( model, Cmd.none )



---- SUBSCRIPTIONS ----


subscriptions : Model -> Sub Msg
subscriptions _ =
    Sub.none



---- VIEW ----


view : Model -> Browser.Document Msg
view model =
    { title = "Parker Couch"
    , body =
        [ containerDiv
            [ div
                [ classes
                    [ T.fl
                    , T.w_100
                    , T.pa1
                    , T.pa2_ns
                    , T.tc
                    ]
                ]
                [ title
                , subheading
                , floatingNav
                , projects projectsList
                ]
            ]
        ]
    }



---- ROUTING ---


handleUrl : Url.Url -> Model -> ( Model, Cmd Msg )
handleUrl url model =
    let
        parser =
            oneOf
                [ route top
                    -- (\_ ->
                    ( { model | page = Home homeData, url = url }
                    , Cmd.none
                    )

                -- )
                , route (s "art" </> top)
                    -- (\_ ->
                    ( { model | page = Art artData, url = url }
                    , Cmd.none
                    )

                -- )
                , route (s "blog" </> top)
                    -- (\_ ->
                    ( { model | page = Blog blogData, url = url }
                    , Cmd.none
                    )

                -- )
                , route (s "portfolio" </> top)
                    -- (\_ ->
                    ( { model | page = Portfolio portfolioData, url = url }
                    , Cmd.none
                    )

                -- )
                ]
    in
    case Parser.parse parser url of
        Just answer ->
            answer

        Nothing ->
            ( { model | page = NotFound notFoundData, url = url }
            , Cmd.none
            )


route : Parser a b -> a -> Parser (b -> c) c
route parser handler =
    Parser.map handler parser



---- PROGRAM ----


main : Program () Model Msg
main =
    Browser.application
        { init = init
        , onUrlChange = UrlChanged
        , onUrlRequest = LinkClicked
        , subscriptions = subscriptions
        , update = update
        , view = view
        }



-- Browser.element
--     { view = view
--     , init = \_ -> init
--     , update = update
--     , subscriptions = always Sub.none
--     }
--- View Elements ---


floatingNav : Html Msg
floatingNav =
    div
        [ classes
            [ T.mw9
            , T.center
            , T.ph3_ns
            , T.purple
            ]
        ]
        [ div
            [ classes [ T.cf, T.ph2_ns ] ]
            [ div
                [ classes (navButtonContainer ++ [ T.w_100_m ]) ]
                [ a
                    [ classes (navButton ++ [ T.w_50_m ])
                    , href "#"
                    ]
                    [ text "Resume" ]
                ]
            , div
                [ classes (navButtonContainer ++ [ T.w_50_m ]) ]
                [ a
                    [ classes navButton
                    , href "#"
                    ]
                    [ text "Linkedin" ]
                ]
            , div
                [ classes (navButtonContainer ++ [ T.w_50_m ]) ]
                [ a
                    [ classes navButton
                    , href "#"
                    ]
                    [ text "Github" ]
                ]
            ]
        ]


containerDiv : List (Html Msg) -> Html Msg
containerDiv elements =
    div
        [ classes
            [ T.mw_100
            , T.mw7_ns
            , T.center
            , T.pa1
            , T.ph4_ns
            ]
        ]
        elements


title : Html Msg
title =
    div
        [ classes
            [ T.vh_50
            , T.mb1
            , T.flex_ns
            , T.justify_center_ns
            , T.pa4
            ]
        ]
        [ h1
            [ classes
                [ T.code
                , T.f1
                , T.absolute
                , T.static_ns
                , T.mh2_ns
                , "first-name"
                ]
            ]
            [ text "Parker" ]
        , h1
            [ classes
                [ T.code
                , T.f1
                , T.absolute
                , T.static_ns
                , T.mh2_ns
                , "last-name"
                ]
            ]
            [ text "Couch" ]
        ]


subheading : Html Msg
subheading =
    div
        [ classes
            [ T.vh_50
            , T.mb4_ns
            , T.mb1
            , T.flex
            , T.flex_column
            , T.justify_center_ns
            , T.content_center
            , T.pa2
            , T.pt6
            , T.tr
            ]
        ]
        [ h2
            [ classes
                [ T.code
                , T.f3
                , T.ma0
                , T.tl_ns
                , T.order_0
                ]
            ]
            [ text "Artist" ]
        , h2
            [ classes
                [ T.code
                , T.f3
                , T.ma0
                , T.tr_ns
                , T.order_1
                , T.order_2_ns
                ]
            ]
            [ text "Explorer" ]
        , h2
            [ classes
                [ T.code
                , T.f3
                , T.ma0
                , T.tc_ns
                , T.light_purple
                , T.order_2
                , T.order_1_ns
                ]
            ]
            [ text "Developer" ]
        ]


projects : List Project -> Html Msg
projects projectList =
    div []
        (List.map projectCard projectList)


projectCard : Project -> Html Msg
projectCard project =
    div [ classes [ T.mb5 ] ]
        [ projectTitle project.name
        , preview project.img
        , projectDescription project.description
        , badgeRow project.badges project.repoUrl
        ]


preview : String -> Html Msg
preview imgUrl =
    div
        [ classes
            [ T.w_75
            , T.pa1
            , T.ml_auto
            ]
        ]
        [ img [ classes [ T.mw_100, T.br2, T.shadow_1 ], src imgUrl ] [] ]


projectTitle : String -> Html Msg
projectTitle titleText =
    h2
        [ classes
            [ T.code
            , T.w_100
            , T.f2
            , T.black
            , T.tl
            ]
        ]
        [ text titleText ]


projectDescription : String -> Html Msg
projectDescription descriptionText =
    p
        [ classes
            [ T.w_100
            , T.f4
            , T.black
            , T.tl
            ]
        ]
        [ text descriptionText ]


badgeRow : List String -> String -> Html Msg
badgeRow icons repoUrl =
    let
        elements =
            List.map (\l -> badge l) icons ++ [ badgeLink repoUrl ]
    in
    div [ classes [ T.pa0, T.w_100, T.h_auto, T.flex ] ] elements


badge : String -> Html Msg
badge location =
    div
        [ classes
            [ T.w_20
            , T.h_100
            , T.pa1
            , T.dib
            , T.br2
            , T.ba
            , T.bw2
            , T.mh1
            , T.grow
            , T.shadow_2
            ]
        ]
        [ img [ classes [ T.h2 ], src location ] [] ]


badgeLink : String -> Html Msg
badgeLink url =
    a
        [ classes
            [ T.w_40
            , T.h_auto
            , T.pa0
            , T.dib
            , T.br2
            , T.ba
            , T.bw2
            , T.mh1
            , T.bg_light_purple
            , T.black
            , T.no_underline
            , T.grow_large
            , T.code
            , T.shadow_5
            , T.flex
            , T.items_center
            ]
        , href url
        ]
        [ h1 [ classes [ T.w_100, T.f2_l, T.f3 ] ] [ text "source" ] ]



--- CSS Components ---


navButtonContainer : List String
navButtonContainer =
    [ T.fl
    , T.w_third_l
    , T.w_50_m
    , T.w_100
    , T.pa3
    ]


navButton : List String
navButton =
    [ T.f4
    , T.link
    , T.dim
    , T.br2
    , T.w_100
    , T.pv4
    , T.mb2
    , T.dib
    , T.white
    , T.bg_light_purple
    ]


deviceIcon =
    "assets/device.png"


pokeIcon =
    "assets/pokeball.png"


editIcon =
    "assets/edit.png"


detailIcon =
    "assets/details.png"


clearIcon =
    "assets/clear.png"


infoIcon =
    "assets/info.png"


loremText =
    "Labore nisi mollit esse qui deserunt reprehenderit reprehenderit ad. Ad ea proident labore ullamco cillum. Amet exercitation sunt elit incididunt amet do cupidatat anim. Ipsum tempor ad mollit laboris ullamco minim Lorem deserunt deserunt tempor ipsum ea sunt"


type alias Project =
    { name : String
    , description : String
    , liveUrl : String
    , repoUrl : String
    , img : String
    , badges : List String
    }


projectsList : List Project
projectsList =
    [ projectOne
    , projectTwo
    , projectThree
    , projectFour
    ]


projectOne : Project
projectOne =
    { name = "Just Smash Bricks"
    , description = "Breakout style game created with Kontra.js"
    , liveUrl = "https://parkercouch.github.io/brick-smashing-game/"
    , repoUrl = "https://github.com/parkercouch/brick-smashing-game"
    , img = "assets/square.png"
    , badges = [ deviceIcon, pokeIcon, infoIcon ]
    }


projectTwo : Project
projectTwo =
    { name = "hikr"
    , description = "Social media to find hiking partners"
    , liveUrl = "https://hikr-app.herokuapp.com/"
    , repoUrl = "https://github.com/parkercouch/hikr"
    , img = "assets/square.png"
    , badges = [ deviceIcon, pokeIcon, infoIcon ]
    }


projectThree : Project
projectThree =
    { name = "Syllaboard"
    , description = "Dashboard for instructors and students to keep track of assignments."
    , liveUrl = "http://syllaboard.herokuapp.com/"
    , repoUrl = "https://github.com/parkercouch/syllaboard-client"
    , img = "assets/square.png"
    , badges = [ deviceIcon, pokeIcon, infoIcon ]
    }


projectFour : Project
projectFour =
    { name = "???"
    , description = "Who knows?"
    , liveUrl = ""
    , repoUrl = ""
    , img = "assets/square.png"
    , badges = [ deviceIcon, pokeIcon, infoIcon ]
    }
